<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 雪泥鸿爪</title>
    <link>https://www.lix23.com/posts/</link>
    <description>Recent content in Posts on 雪泥鸿爪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>all copyright reserved for lixin xinli80@qq.com </copyright>
    <lastBuildDate>Tue, 14 Nov 2023 23:13:41 +0800</lastBuildDate><atom:link href="https://www.lix23.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在云上自建Kubernetes集群</title>
      <link>https://www.lix23.com/posts/new-k8s-cluster/</link>
      <pubDate>Tue, 14 Nov 2023 23:13:41 +0800</pubDate>
      
      <guid>https://www.lix23.com/posts/new-k8s-cluster/</guid>
      <description>安装背景 出于对于kubernetes集群的配置灵活性的需求，很多朋友有自建Kubernetes集群的诉求，在此记录一下我在阿里云上购买ECS并从头开始来完成kubernetes集群的过程；为节省成本集群中的节点采用了规格为2c4G的突发性能型ECS，操作系统是Anolis OS 8.8 RHCK 64位；使用kubeadm这个工具来进行安装，主要流程可抽象成两个大步骤：
初始化节点：通过rpm包管理工具安装kubectl、kubelet、kubeadm 这几个组件；安装containerd，并完成相关配置； 初始化集群：注意kubeadm的配置文件，生成证书等配置，建立高可用控制面，并将worker节点加入集群中； 初始化节点 安装kubectl、kubeadm、kubelet 组件 考虑到网络联通性问题，需要加入rpm包的国内本地化配置源，首先是kubernetes的源：添加rpm源的配置如下所示，清注意关闭gpgcheck
cat &amp;lt;&amp;lt; EOF |tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF # 建议设定版本，不声明版本则安装具体的最新版； yum install kubectl kubeadm kubelet 安装 containerd contaienrd 配置
参考 https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#containerd 来进行containerd的安装
containerd 国内本地化源配置
wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 先验证contianerd包在源中存在，然后执行如下命令安装相关 containerd 运行时：
yum install containerd.io systemctl enable containerd systemctl start containerd 修改 containerd 中的 sandbox image配置 修改 containerd 配置文件 config.toml文件中的 sandbox image配置：registry.aliyuncs.com/google_containers/pause:3.9 ，此修改是因为默认的镜像地址为gcr，在国内无法正常访问。</description>
    </item>
    
    <item>
      <title>Dnat Redirect Tproxy</title>
      <link>https://www.lix23.com/posts/dnat-redirect-tproxy/</link>
      <pubDate>Sun, 17 Sep 2023 23:37:09 +0800</pubDate>
      
      <guid>https://www.lix23.com/posts/dnat-redirect-tproxy/</guid>
      <description>在kubernetes的Service实现中，默认是使用iptables来实现流量路由转发的，iptables 在使用过程中常见的目标（target）有DNAT，REDIRECT 以及 TPROXY，接下来我们看看这几个target之间的异同。
1、DNAT 模式 DNAT 是 Destination Network Address Translation 的缩写，含义是目标地址转换，在使用DNAT进行转发的场景中将会修改传输层数据包 header 中 的目标地址，它是一种低性能损耗的本地路由，一般被称为端口转发。
DNAT 实现原理是在路由规则生效之前修改数据包的目标IP地址或者端口；并需要依赖内核中的 connectin tracking 机制来工作；有了 connection tracking 回包才可以被匹配到，从而返回的数据包中相关地址也可以转换回来。
例子：
#将12.0.0.254:8080 转换成 192.168.72.10:80 iptables -t nat -A PREROUTING -i ens33 -d 12.0.0.254 -p tcp --dport 8080 -j DNAT --to 192.168.72.10:80 这条命令的作用是将 从ens33网卡过来，访问 12.0.0.254:8080 的tcp协议的数据包的目标地址改为 192.168.72.10:80。
调用者实际上并不知道流量最终被路由到了一个内部服务器，他只知道是与他通信的这个网关的地址，并且他的访问得到了正确的response。
TIP DNAT模式下数据回包如何回到最初的调用者
在 Linux 网络栈中，DNAT（Destination Network Address Translation，目标网络地址转换）是通过 Connection Tracking（conntrack）系统来实现的。这是一种内核机制，用于追踪和记录网络连接的状态信息（如 TCP 流或 UDP 对话），以便在进行网络地址转换（NAT）时能正确地对数据包进行处理。
当一个数据包首次到达网关时，如果该数据包匹配到某个 DNAT 规则，那么 conntrack 系统会在内核中创建一条新的连接追踪记录。这个记录会包含原始的源地址和目标地址（在进行 DNAT 之前的地址），以及转换后的源地址和目标地址（在进行 DNAT 之后的地址）。这个记录会一直存在，直到这个连接结束或超时。</description>
    </item>
    
    <item>
      <title> 如何用hugo生成静态网站</title>
      <link>https://www.lix23.com/posts/how-to-gen-website/</link>
      <pubDate>Fri, 25 Aug 2023 13:08:35 +0800</pubDate>
      
      <guid>https://www.lix23.com/posts/how-to-gen-website/</guid>
      <description>三年前使用hugo搭建了对应的静态blog网站，三年后花了点时间重新捡起来，在这里记录一下hugo使用步骤，也防止以后再忘记；
安装 Hugo：首先，你需要在你的计算机上安装 Hugo。根据你的操作系统，安装方法可能会有所不同，我在mac上是通过brew install hugo来进行安装的； 创建网站：通过 hugo new site ${your_website_name} 来创建相关网站元目录； 根据个人需求来选择一个主题 比如diary主题 https://themes.gohugo.io/themes/hugo-theme-diary/ ，根据主题的配置样例来修改 hugo.toml 完成网站的个性化配置； 在元目录下执行如下命令来创建对应的博客帖子：hugo new posts/${post_name}.md ，用你喜欢的文件编辑器编辑相关帖子，使用 hugo server 命令来尝试在本地拉起这个网站，并可以通过浏览器来访问网站检查效果； 生成静态网站：当你添加了足够的内容后，在相应的目录下使用以下命令生成静态网站：hugo，这个命令会在 public 目录下生成生成静态网站，把生成的网站内容上传到github相应的repo下即可访问； </description>
    </item>
    
    <item>
      <title>第一篇帖子</title>
      <link>https://www.lix23.com/posts/my-very-first-post/</link>
      <pubDate>Sat, 18 Jul 2020 08:06:48 +0800</pubDate>
      
      <guid>https://www.lix23.com/posts/my-very-first-post/</guid>
      <description>从蝶园搬出来到溪望差不多第三周了吧，so far so good，希望一切都在往好的方向发展，I think I need more time to shape myself, keep fighting!</description>
    </item>
    
  </channel>
</rss>
