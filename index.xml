<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>雪泥鸿爪</title>
    <link>https://www.lix23.com/</link>
    <description>Recent content on 雪泥鸿爪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>all copyright reserved for lixin xinli80@qq.com </copyright>
    <lastBuildDate>Tue, 14 Nov 2023 23:13:41 +0800</lastBuildDate>
    
        <atom:link href="https://www.lix23.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>在云上自建Kubernetes集群</title>
        <link>https://www.lix23.com/posts/new-k8s-cluster/</link>
        <pubDate>Tue, 14 Nov 2023 23:13:41 +0800</pubDate>
        
        <guid>https://www.lix23.com/posts/new-k8s-cluster/</guid>
        <description>雪泥鸿爪 https://www.lix23.com/posts/new-k8s-cluster/ -&lt;h2 id=&#34;安装背景&#34;&gt;安装背景&lt;/h2&gt;
&lt;p&gt;出于对于kubernetes集群的配置灵活性的需求，很多朋友有自建Kubernetes集群的诉求，在此记录一下我在阿里云上购买ECS并从头开始来完成kubernetes集群的过程；为节省成本集群中的节点采用了规格为2c4G的突发性能型ECS，操作系统是Anolis OS 8.8 RHCK 64位；使用kubeadm这个工具来进行安装，主要流程可抽象成两个大步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化节点：通过rpm包管理工具安装kubectl、kubelet、kubeadm 这几个组件；安装containerd，并完成相关配置；&lt;/li&gt;
&lt;li&gt;初始化集群：注意kubeadm的配置文件，生成证书等配置，建立高可用控制面，并将worker节点加入集群中；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;初始化节点&#34;&gt;初始化节点&lt;/h2&gt;
&lt;h3 id=&#34;安装kubectlkubeadmkubelet-组件&#34;&gt;安装kubectl、kubeadm、kubelet 组件&lt;/h3&gt;
&lt;p&gt;考虑到网络联通性问题，需要加入rpm包的国内本地化配置源，首先是kubernetes的源：添加rpm源的配置如下所示，清注意关闭gpgcheck&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF |tee /etc/yum.repos.d/kubernetes.repo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[kubernetes]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name=Kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;enabled=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gpgcheck=0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;repo_gpgcheck=0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 建议设定版本，不声明版本则安装具体的最新版；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install kubectl kubeadm kubelet   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装-containerd&#34;&gt;安装 containerd&lt;/h3&gt;
&lt;p&gt;contaienrd 配置&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#containerd&#34;&gt;https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#containerd&lt;/a&gt; 来进行containerd的安装&lt;/p&gt;
&lt;p&gt;containerd 国内本地化源配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先验证contianerd包在源中存在，然后执行如下命令安装相关 containerd 运行时：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  yum install containerd.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  systemctl enable containerd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  systemctl start containerd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改-containerd-中的-sandbox-image配置&#34;&gt;修改 containerd 中的 sandbox image配置&lt;/h3&gt;
&lt;p&gt;修改 containerd 配置文件 config.toml文件中的 sandbox image配置：registry.aliyuncs.com/google_containers/pause:3.9 ，此修改是因为默认的镜像地址为gcr，在国内无法正常访问。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 生成对应containerd的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;containerd config default &amp;gt; /etc/containerd/config.toml  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 保存此配置文件后通过 命令重启生效配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart containerd 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看containerd当前生效配置：containerd config dump &amp;gt; 2.toml；&lt;/li&gt;
&lt;li&gt;如果containerd的工作状态不符合预期，可以通过 journalctl -xeu containerd 命令来查看containerd日志 ；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;添加-crictl配置&#34;&gt;添加 crictl配置&lt;/h3&gt;
&lt;p&gt;相关配置文件为 /etc/crictl.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF |tee /etc/crictl.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# these first two endpoint setting is where you configure crictl to containerd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;runtime-endpoint: unix:///run/containerd/containerd.sock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;image-endpoint: unix:///run/containerd/containerd.sock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;timeout: 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;debug: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时执行 crictl images 可以正常输出内容；&lt;/p&gt;
&lt;h3 id=&#34;安装-并配置-cni-插件&#34;&gt;安装 并配置 cni 插件&lt;/h3&gt;
&lt;p&gt;在 cni 界面 &lt;a href=&#34;https://github.com/containernetworking/plugins/releases&#34;&gt;https://github.com/containernetworking/plugins/releases&lt;/a&gt; ，找到 v1.3.0 或者v1.0.0 版本，通过wget命令下载此包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 通过命令创建cni的对应目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /opt/cni/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 通过如下相关命令将包解压至相关目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.3.0.tgz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本地cni配置，注意版本号以及相关ip子网地址段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF | tee /etc/cni/net.d/10-containerd-net.conflist
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;cniVersion&amp;#34;: &amp;#34;1.0.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;name&amp;#34;: &amp;#34;containerd-net&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;plugins&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;type&amp;#34;: &amp;#34;bridge&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;bridge&amp;#34;: &amp;#34;cni0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;isGateway&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;ipMasq&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;promiscMode&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;ipam&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;type&amp;#34;: &amp;#34;host-local&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;ranges&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         [{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           &amp;#34;subnet&amp;#34;: &amp;#34;10.14.0.0/24&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         }]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       ],
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;routes&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         { &amp;#34;dst&amp;#34;: &amp;#34;0.0.0.0/0&amp;#34; },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         { &amp;#34;dst&amp;#34;: &amp;#34;::/0&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;type&amp;#34;: &amp;#34;portmap&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;capabilities&amp;#34;: {&amp;#34;portMappings&amp;#34;: true},
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;externalSetMarkChain&amp;#34;: &amp;#34;KUBE-MARK-MASQ&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意此时只解决了本节点上容器通信的问题，并未解决在节点间的容器通信问题，跨节点通信需要通过类似 flannel、calico 这样的方案来完成。&lt;/p&gt;
&lt;p&gt;测试：通过crictl 成功run起来一个本地容器，参考crictl 相关文档；&lt;/p&gt;
&lt;h3 id=&#34;内核参数配置修改&#34;&gt;内核参数配置修改&lt;/h3&gt;
&lt;p&gt;内核参数设置（如果不做如下操作，将会无法通过 kubeadm init的 precheck ）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 修改域名配置 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hostnamectl set-hostname k8s-1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装tc &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install iproute-tc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directory 如果遇到相关错误，请执行 modprobe 命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; modprobe bridge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; modprobe br_netfilter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net.bridge.bridge-nf-call-iptables=1&amp;#34;&lt;/span&gt; | sudo tee -a /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net.bridge.bridge-nf-call-iptables = 1&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net.bridge.bridge-nf-call-ip6tables = 1&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net.ipv4.ip_forward = 1&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vm.swappiness = 0&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl 使相关配置生效
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl -p /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;集群初始化--拉起控制面&#34;&gt;集群初始化&amp;ndash;拉起控制面&lt;/h3&gt;
&lt;p&gt;控制面（control plane）采用三台服务器，etcd与api server同机部署的架构；通过ssh登录一台预先规划好的master服务器，通过kubeadm 来完成节点初始化工作，注意给出config配置文件需要使用国内阿里云的镜像仓库；&amp;ndash;apiserver-advertise-address 为此master服务器的内网地址；另外控制面的证书如果需要上传到集群请在 kubeadm init 执行时加上 &amp;ndash;upload-certs 这个参数。
一般来说 kubeadm的init命令如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubeadm init &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --apiserver-advertise-address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.0.121 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --image-repository registry.aliyuncs.com/google&lt;span style=&#34;color:#ae81ff&#34;&gt;\_&lt;/span&gt;containers &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --kubernetes-version v1.28.2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --service-cidr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.1.0.0/16 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --pod-network-cidr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.244.0.0/16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是为了更多配置项，我们选择配置文件的方式来进行init，具体命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubeadm init --config kubeadm-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;kubeadm 配置文件内容如下，certSANs配置中将三台master的hostname及ip地址都写入，此外还加入了api server对应LB的域名及ip地址；注意此处采用的是将etcd实例与api server 实例部署在同一node上的架构，如果是生产环境部署建议将etcd集群拆分部署在其他服务器上，如果是etcd拆分部署的情况，kubeadm配置文件的内容还会有所不同，具体请参照附录中的文件链接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiServer&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;certSANs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;api.k8s.local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;api.lixin.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;master3105&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;master12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;master079&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0.3.105&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0.1.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0.0.79&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0.4.212&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;extraArgs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;authorization-mode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Node,RBAC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;timeoutForControlPlane&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4m0s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubeadm.k8s.io/v1beta3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;certificatesDir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/etc/kubernetes/pki&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;clusterName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kube-lixin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;controllerManager&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dns&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;etcd&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;local&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;dataDir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/etcd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;imageRepository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;registry.aliyuncs.com/google_containers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterConfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kubernetesVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1.28.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;controlPlaneEndpoint&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.0.4.212:6443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;networking&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;dnsDomain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cluster.local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;podSubnet&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10.244.0.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;serviceSubnet&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10.96.0.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;scheduler&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意观察在kubeadm init 执行过程中的日志输出，错误日志会在此处给出详细信息，如果日志不够细致的话还可以加入 &amp;ndash;v=10 参数并执行；&lt;/p&gt;
&lt;p&gt;在其他两台控制面机器上完成节点初始化（本文第一部分）后，如果在kubeadm init时没有选择加上 &amp;ndash;upload-certs 参数，则需要将相关kubernetes证书在控制面机器之间进行拷贝：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/etcd/ca.key root@10.0.1.2:/etc/kubernetes/pki/etcd                                                                            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/etcd/ca.crt root@10.0.0.79:/etc/kubernetes/pki/etcd    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/front-proxy-ca.key root@10.0.0.79:/etc/kubernetes/pki 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/front-proxy-ca.crt root@10.0.0.79:/etc/kubernetes/pki
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/sa.pub root@10.0.0.79:/etc/kubernetes/pki
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/sa.key root@10.0.0.79:/etc/kubernetes/pki   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/ca.key root@10.0.0.79:/etc/kubernetes/pki 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp /etc/kubernetes/pki/ca.crt root@10.0.0.79:/etc/kubernetes/pki
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过如下命令将此节点作为一个master加入集群，注意参数 &amp;ndash;control-plane 这里说明是作为master进入的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; kubeadm join 10.0.3.105:6443 --token svy3br.1hcjfw953q23ypq3 --discovery-token-ca-cert-hash sha256:032c441fac7307da1867fab25ab77f480318c3ca68fb67977cd8011c3a4aab88 --control-plane
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;高可用集群控制面的两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果证书没有选择上传集群，则需要提前手动完成证书在master实例节点之间的copy；&lt;/li&gt;
&lt;li&gt;需要申请一个SLB将流量转发到多个api server 实例上，在 controlPlaneEndpoint 上体现了这个SLB的对应配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;加入worker节点&#34;&gt;加入worker节点&lt;/h3&gt;
&lt;p&gt;此刻可以说是完成了控制面的搭建；通过如下命令将worker节点加入集群，注意worker节点并不需要提前scp证书，并且不需要 control-plane 参数；如果执行时日志中有 token 过期相关错误，需要登录到最初的master节点上，通过kubeadm token create创建一个新的token,并在&amp;ndash;token 处使用新的token。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kubeadm join 10.0.3.105:6443 --token svy3br.1hcjfw953q23ypq3 --discovery-token-ca-cert-hash sha256:032c441fac7307da1867fab25ab77f480318c3ca68fb67977cd8011c3a4aab88 --v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;master节点的添加及一些注意事项&#34;&gt;master节点的添加及一些注意事项&lt;/h3&gt;
&lt;p&gt;如果需要新增控制面节点机器，需要在kubeadm配置文件中加入相关ip及dns配置，并通过如下kubeadm init phase命令重新生成相关的api server证书；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 新加入控制面机器，如果证书中没有包括相关机器的hostname及ip，需要重新生成对应的api server证书 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kubeadm init phase certs apiserver --config kubeadm.yaml 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 重新生成cluster-info：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kubeadm init phase bootstrap-token
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时已完成自建kubernetes集群的初步搭建，对于集群中跨node的通信需求，推荐安装Calico来解决；&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;h3 id=&#34;安装过程中参考了如下文档中的描述&#34;&gt;安装过程中参考了如下文档中的描述：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果要使用外部etcd，请参考如下文档中的创建步骤：https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/high-availability/#%E5%A4%96%E9%83%A8-etcd-%E8%8A%82%E7%82%B9&lt;/li&gt;
&lt;li&gt;参考安装流程：https://cloud.tencent.com/developer/article/1706627&lt;/li&gt;
&lt;li&gt;控制面高可用： &lt;a href=&#34;https://zhangguanzhang.github.io/2019/03/11/k8s-ha/#/vip-%E5%8D%95%E7%82%B9%E7%9A%84%E5%9D%91%E4%B9%8B-%E2%80%93advertise-address&#34;&gt;https://zhangguanzhang.github.io/2019/03/11/k8s-ha/#/vip-%E5%8D%95%E7%82%B9%E7%9A%84%E5%9D%91%E4%B9%8B-%E2%80%93advertise-address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装 &lt;a href=&#34;https://cloud.tencent.com/developer/article/2145554&#34;&gt;https://cloud.tencent.com/developer/article/2145554&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;containerd &lt;a href=&#34;https://cloud.tencent.com/developer/article/2145554&#34;&gt;https://cloud.tencent.com/developer/article/2145554&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;containerd 设置文档 包含了cni &lt;a href=&#34;https://github.com/containerd/containerd/blob/main/docs/getting-started.md&#34;&gt;https://github.com/containerd/containerd/blob/main/docs/getting-started.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;国内环境安装 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/46341911&#34;&gt;https://zhuanlan.zhihu.com/p/46341911&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cni插件配置，参考相关文档，解决可能遇到的版本不匹配的问题：https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/troubleshooting-cni-plugin-related-errors/#updating-your-cni-plugins-and-cni-config-files&lt;/li&gt;
&lt;li&gt;加入master节点之前，需要手动分发证书：参考 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/high-availability/#manual-certs&#34;&gt;https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/high-availability/#manual-certs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;完成apiserver 证书的检查工作，并更新相关证书更新，并重新生成kube-system中的cluster-info configmap对象：参考：https://cloud.tencent.com/developer/article/1824860&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubeadm-join命令中的-discovery-token-ca-cert-hash-对应的值可以通过如下命令获取&#34;&gt;kubeadm join命令中的 discovery-token-ca-cert-hash 对应的值可以通过如下命令获取：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&amp;gt;/dev/null | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;   openssl dgst -sha256 -hex | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^.* //&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;证书相关一些命令备忘&#34;&gt;证书相关一些命令备忘：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看证书内容：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -in apiserver.crt -text -noout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将新master的IP地址更新入证书的另一种做法：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -new -newkey rsa:4096 -days &lt;span style=&#34;color:#ae81ff&#34;&gt;3650&lt;/span&gt; -nodes -x509 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/C=US/ST=Denial/L=Springfield/O=Dis/CN=kube-apiserver&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -keyout apiserver.key &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -out apiserver.crt &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -extensions SAN -config &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[req]&amp;#34;&lt;/span&gt;; echo distinguished_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;req; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SAN]&amp;#34;&lt;/span&gt;; echo subjectAltName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;IP:Load_Balancer_IP1,IP:Load_Balancer_IP2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -new -newkey rsa:4096 -days &lt;span style=&#34;color:#ae81ff&#34;&gt;3650&lt;/span&gt; -nodes -x509 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/C=US/ST=Denial/L=Springfield/O=Dis/CN=kube-apiserver&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -keyout apiserver.key &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -out apiserver.crt &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -extensions SAN -config &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[req]&amp;#34;&lt;/span&gt;; echo distinguished_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;req; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SAN]&amp;#34;&lt;/span&gt;; echo subjectAltName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster.local,DNS:master3105,IP:10.96.0.1,IP:10.0.3.105,IP:10.0.4.212&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://www.lix23.com/posts/new-k8s-cluster/ - all copyright reserved for lixin xinli80@qq.com </description>
        </item>
    
    
    
        <item>
        <title>Dnat Redirect Tproxy</title>
        <link>https://www.lix23.com/posts/dnat-redirect-tproxy/</link>
        <pubDate>Sun, 17 Sep 2023 23:37:09 +0800</pubDate>
        
        <guid>https://www.lix23.com/posts/dnat-redirect-tproxy/</guid>
        <description>雪泥鸿爪 https://www.lix23.com/posts/dnat-redirect-tproxy/ -&lt;p&gt;在kubernetes的Service实现中，默认是使用iptables来实现流量路由转发的，iptables 在使用过程中常见的目标（target）有DNAT，REDIRECT 以及 TPROXY，接下来我们看看这几个target之间的异同。&lt;/p&gt;
&lt;h2 id=&#34;1dnat-模式&#34;&gt;1、DNAT 模式&lt;/h2&gt;
&lt;p&gt;DNAT 是 Destination Network Address Translation 的缩写，含义是目标地址转换，在使用DNAT进行转发的场景中将会修改传输层数据包 header 中 的目标地址，它是一种低性能损耗的本地路由，一般被称为端口转发。&lt;/p&gt;
&lt;p&gt;DNAT 实现原理是在路由规则生效之前修改数据包的目标IP地址或者端口；并需要依赖内核中的 connectin tracking 机制来工作；有了 connection tracking 回包才可以被匹配到，从而返回的数据包中相关地址也可以转换回来。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#将12.0.0.254:8080 转换成 192.168.72.10:80
iptables -t nat -A PREROUTING -i ens33 -d 12.0.0.254 -p tcp --dport 8080 -j DNAT --to 192.168.72.10:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令的作用是将 从ens33网卡过来，访问 12.0.0.254:8080 的tcp协议的数据包的目标地址改为 192.168.72.10:80。&lt;/p&gt;
&lt;p&gt;调用者实际上并不知道流量最终被路由到了一个内部服务器，他只知道是与他通信的这个网关的地址，并且他的访问得到了正确的response。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP DNAT模式下数据回包如何回到最初的调用者&lt;/p&gt;
&lt;p&gt;在 Linux 网络栈中，DNAT（Destination Network Address Translation，目标网络地址转换）是通过 Connection Tracking（conntrack）系统来实现的。这是一种内核机制，用于追踪和记录网络连接的状态信息（如 TCP 流或 UDP 对话），以便在进行网络地址转换（NAT）时能正确地对数据包进行处理。&lt;/p&gt;
&lt;p&gt;当一个数据包首次到达网关时，如果该数据包匹配到某个 DNAT 规则，那么 conntrack 系统会在内核中创建一条新的连接追踪记录。这个记录会包含原始的源地址和目标地址（在进行 DNAT 之前的地址），以及转换后的源地址和目标地址（在进行 DNAT 之后的地址）。这个记录会一直存在，直到这个连接结束或超时。&lt;/p&gt;
&lt;p&gt;当来自服务器的响应数据包到达网关时，conntrack 系统会使用该数据包的源地址和目标地址（在进行 DNAT 之后的地址）来查找对应的连接追踪记录。如果找到了对应的记录，那么系统就会知道这个数据包是属于哪个连接的，以及在进行 DNAT 之前的源地址和目标地址是什么。然后，系统就可以将这个数据包的源地址和目标地址修改回原始的地址，然后将数据包发送回最初的调用者。&lt;/p&gt;
&lt;p&gt;因此，conntrack 系统是保障 DNAT 正常工作的关键。没有 conntrack 系统，网关就无法知道一个响应数据包应该发送给哪个客户端，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-redirect-模式&#34;&gt;2 、REDIRECT 模式&lt;/h2&gt;
&lt;p&gt;REDIRECT 可以被认为是一种特别的DNAT模式，数据包被转到本机的另一个端口，传输层数据包 header 中的地址也会被修改；&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iptables --table nat --A PREROUTING --protocol tcp --dport 80 --jump REDIRECT --to-ports 8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相对于DNAT的区别是：REDIRECT不需要指定目的IP地址，只能指定目的端口； REDIRECT模式将流量转向本地的另一个socket端口，在这个场景中，服务端不知道调用者的存在，调用者知道被调用者的IP，但调用者并不知道数据包被转发到了另一个socket端口；&lt;/p&gt;
&lt;h2 id=&#34;3tproxy-透明代理模式&#34;&gt;3、TPROXY 透明代理模式&lt;/h2&gt;
&lt;p&gt;DNAT 模式 与 REDIRECT 模式的一切路由操作都是在内核中完成，与这二者不同的是， TPROXY 模式是另一种工作模式。工作原理简单解释如下：
在执行 iptables 命令时 目标（Target）为 TPROXY 的情况下会将数据包在不修改传输层Header（IP）的基础上将数据转发至本地的一个套接字；并加上对应的Mark，然后
再通过ip rule 以及 ip route的配合对数据包再做进一步处理后发给一个透明代理；在这种场景下 proxy 所收到的数据包保留了原始的源地址以及目标地址；
透明代理对于调用者client是透明的（不可见的），也就是说调用者client及调用者的os也无需其他配置；在这个场景中，网络参数都可以按照所需的进行设置而不影响proxy代理。
一个 TPROXY 模式的例子如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iptables -t mangle -A PREROUTING -p tcp --dport 80 -j TPROXY --on-port 8080 --tproxy-mark 0x1/0x1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令的作用是，将所有目标端口为 80 的 TCP 数据包转送到本地的 8080 端口，并将这些数据包的 &amp;ldquo;mark&amp;rdquo; 设置为 0x1（这个 &amp;ldquo;mark&amp;rdquo; 可以被 ip rule 或 ip route 使用）。
TPROXY 模式与 REDIRECT 模式的区别，REDIRECT会修改传输层header，而 TPROXY 不会对数据包有任何修改，他只是将数据包parcket 转发出去（此处不是内核的数据包forward，只是socket之间的数据包copy）。在工作过程中也不需要connection tracking，数据包的最初的目标端口将作为链接套接字（connection socket）的本地端口。
可以在网关机器，以及最终的服务提供者机器上通过 ss &amp;ndash;tcp -numeric &amp;ndash;process &amp;ndash;listening 命令看到对应的TCP链接建立情况。&lt;/p&gt;
&lt;p&gt;在实现透明代理时会将 socket 配置 IP_TRANSPARENT参数： 当我们将 IP_TRANSPARENT 设置为真（true）时，我们可以在一个套接字上接收到并发送任何本地或非本地的 IP 地址和端口的数据包。这对于实现透明代理很有用，因为它允许代理服务器接收并处理原本将发送到其他服务器的数据包。此功能不需要内核态的connection tracking 或者 ip forwarding。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iptables 支持以下四种表（table）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;filter：这是默认的 iptables 表，也是最常用的表。当没有指定 -t 参数时，iptables 会使用 filter 表。filter 表用于过滤数据包，它包含三个内置链（chain）：INPUT（用于处理进入本机的数据包）、FORWARD（用于处理通过本机转发的数据包）和 OUTPUT（用于处理由本机发出的数据包）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nat：这个表用于网络地址转换（Network Address Translation, NAT）。它包含三个内置链：PREROUTING（用于在路由决策之前处理数据包）、OUTPUT（用于处理由本机发出的数据包）和 POSTROUTING（用于在路由决策之后处理数据包）。nat 表通常用于修改数据包的源地址或目标地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mangle：这个表用于特殊的数据包修改，如修改数据包的服务类型（TOS）、修改数据包的时间生存（TTL）等。mangle 表包含五个内置链：PREROUTING、OUTPUT、FORWARD、INPUT 和 POSTROUTING。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;raw：这个表用于配置不进行连接跟踪（connection tracking）的数据包。它包含两个内置链：PREROUTING 和 OUTPUT。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于每一种表，你都可以使用 -A（Append）、-D（Delete）、-I（Insert）、-R（Replace）等参数来修改表中的规则。你也可以使用 -L（List）参数来查看表中的规则。例如，iptables -t nat -L 会列出 nat 表中的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：https://gsoc-blog.ecklm.com/iptables-redirect-vs.-dnat-vs.-tproxy/&lt;/p&gt;
- https://www.lix23.com/posts/dnat-redirect-tproxy/ - all copyright reserved for lixin xinli80@qq.com </description>
        </item>
    
    
    
        <item>
        <title> 如何用hugo生成静态网站</title>
        <link>https://www.lix23.com/posts/how-to-gen-website/</link>
        <pubDate>Fri, 25 Aug 2023 13:08:35 +0800</pubDate>
        
        <guid>https://www.lix23.com/posts/how-to-gen-website/</guid>
        <description>雪泥鸿爪 https://www.lix23.com/posts/how-to-gen-website/ -&lt;p&gt;三年前使用hugo搭建了对应的静态blog网站，三年后花了点时间重新捡起来，在这里记录一下hugo使用步骤，也防止以后再忘记；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Hugo：首先，你需要在你的计算机上安装 Hugo。根据你的操作系统，安装方法可能会有所不同，我在mac上是通过brew install hugo来进行安装的；&lt;/li&gt;
&lt;li&gt;创建网站：通过 hugo new site ${your_website_name} 来创建相关网站元目录；&lt;/li&gt;
&lt;li&gt;根据个人需求来选择一个主题 比如diary主题 &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;https://themes.gohugo.io/themes/hugo-theme-diary/&lt;/a&gt; ，根据主题的配置样例来修改 hugo.toml 完成网站的个性化配置；&lt;/li&gt;
&lt;li&gt;在元目录下执行如下命令来创建对应的博客帖子：hugo new posts/${post_name}.md ，用你喜欢的文件编辑器编辑相关帖子，使用 hugo server 命令来尝试在本地拉起这个网站，并可以通过浏览器来访问网站检查效果；&lt;/li&gt;
&lt;li&gt;生成静态网站：当你添加了足够的内容后，在相应的目录下使用以下命令生成静态网站：hugo，这个命令会在 public 目录下生成生成静态网站，把生成的网站内容上传到github相应的repo下即可访问；&lt;/li&gt;
&lt;/ol&gt;
- https://www.lix23.com/posts/how-to-gen-website/ - all copyright reserved for lixin xinli80@qq.com </description>
        </item>
    
    
    
        <item>
        <title>第一篇帖子</title>
        <link>https://www.lix23.com/posts/my-very-first-post/</link>
        <pubDate>Sat, 18 Jul 2020 08:06:48 +0800</pubDate>
        
        <guid>https://www.lix23.com/posts/my-very-first-post/</guid>
        <description>雪泥鸿爪 https://www.lix23.com/posts/my-very-first-post/ -&lt;p&gt;从蝶园搬出来到溪望差不多第三周了吧，so far so good，希望一切都在往好的方向发展，I think I need more time to shape myself, keep fighting!&lt;/p&gt;
- https://www.lix23.com/posts/my-very-first-post/ - all copyright reserved for lixin xinli80@qq.com </description>
        </item>
    
    
  </channel>
</rss> 